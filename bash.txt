set		显示所有变量
输出变量	echo $xxx\${xxx}
设置变量	xxx=xxx,如果两边有空格要用引号：var='lang is en_US'  单引号内的$yyy为普通字符，输出$yyy,双引号则会解析，输出$yyy的值

			\可以把特殊字符变成一般字符
6. 在一串指令中，还需要藉由其他的指令提供的信息，可以使用反单引号『 `指令`』或 『 $(指
令)』 。特别注意，那个 ` 是键盘上方的数字键 1 左边那个按键，而不是单引号！ 例如想要取得
核心版本的设定：
『 version=$(uname -r)』再『 echo $version』可得『 2.6.18-128.el5』
例如：搜索etc下所有带*号的档案盒内容
	grep '\*' $(find /etc -type f)

7. 若该变量为扩增变量内容时，则可用 "$变量名称" 或 ${变量} 累加内容，如下所示：『 PATH="$PATH":/home/bin』

8. 若该变量需要在其他子程序执行，则需要以 export 来使变量变成环境变量：『 export PATH』

9. 通常大写字符为系统默认变量，自行设定变量可以使用小写字符

10.取消变量的方法为使用 unset ：『 unset 变量名称』例如取消 myname 的设定：
『 unset myname』

read  	读取用户输入，设置变量
		选项与参数：
		-p ：后面可以接提示字符！
		-t ：后面可以接等待的『秒数！』这个比较有趣～不会一直等待使用者啦！
		read -p "Please keyin your name: " -t 30 named,  给named设置值
declare [-aixr] variable  宣告变量的类型
		选项与参数：
		-a ：将后面名为 variable 的变量定义成为数组 (array) 类型
		-i ：将后面名为 variable 的变量定义成为整数数字 (integer) 类型
		-x ：用法与 export 一样，就是将后面的 variable 变成环境变量；
		-r ：将变量设定成为 readonly 类型，该变量不可被更改内容，也不能 unset
		 declare -i sum=100+300+50,默认变量类型是字符串的，要显示他们的和需要设置成interger类型

ulimit  限定用户资源
		-a 	列出所有limit

在/etc/issue 里编辑登录画面信息
		\d 本地端时间的日期；
		\l 显示第几个终端机接口；
		\m 显示硬件的等级 (i386/i486/i586/i686...)；
		\n 显示主机的网络名称；
		\o 显示 domain name；
		\r 操作系统的版本 (相当于 uname -r)
		\t 显示本地端时间的时间；
		\s 操作系统的名称；
		\v 操作系统的版本。
在/etc/motd 里编辑登录提示讯息

利用 source 或小数点 (.) 都可以将配置文件的内容读进来目前的 shell 环境中  source ~/.bashrc

cut 	echo $PATH | cut -d ':' -f 3,5
		用:分割环境变量，取出第三个和第五个指定某个范围的值，例如第 12-20的字符，就是 cut -c 12-20
		如果文件里面的某些域是由若干个空格来间隔的，那么用cut就有点麻烦了，因为cut只擅长处理“以一个字符间隔”的文本内容,用awk或者printf

grep 	分析一行讯息， 若当中有我们所需要的信息，就将该行拿出来
 		-a ：将 binary 档案以 text 档案的方式搜寻数据
		-c ：计算找到 '搜寻字符串' 的次数
		-i ：忽略大小写的不同，所以大小写视为相同
		-n ：顺便输出行号
		-v ：反向选择，亦即显示出没有 '搜寻字符串' 内容的那一行！
		--color=auto ：可以将找到的关键词部分加上颜色的显示喔！
egrep   进化版grep，可以使用更多的的正则符号，例如+,?,|,(),()+


sort    排序
		cat /etc/passwd | sort -t ':' -k 3 用冒号分割，以第三个区间排行
uniq    列出不重复的
		-i 	忽略大小写
		-c  计数
wc      字符统计  顺序是行，字数，字符数

tee 	双重数据流导向，把结果显示在屏幕的同时，还可以有> 的作用，写入到档案或者设备
		ll -a | tee ~/homefile | less
		tee -c  追加的方式写入文件

cat /etc/passwd | tr -d ':'    删除冒号
col  -x  把tab转换成空格
join [-ti12] file1 file2
	选项与参数：
	-t ：join 默认以空格符分隔数据，并且比对『第一个字段』的数据，
	如果两个档案相同，则将两笔数据联成一行，且第一个字段放在第一个！
	-i ：忽略大小写的差异；
	-1 ：这个是数字的 1 ，代表『第一个档案要用那个字段来分析』的意思；
	-2 ：代表『第二个档案要用那个字段来分析』的意思。
	join -t ':' -1 4 /etc/passwd -2 3 /etc/group

paste -d '' file1 file2   将两个文件同一行粘贴在一起 默认用tab分割
expand  unexpand ，将tab转换成空格，可以定义大小

split 档案分割
	split -b 300k xxx yyy  将xxx以每份300k的大小分隔开，分割成的文件前缀为yyy，后面是aa，ab，ac。。。
	split -l   以行数来进行分割
	ll -a | split -l 10 - lsroot 把la显示的内容以每10行写成文件，管线后面的-代表前面的stdin

sed   	流编辑  stream editor
		sed 本身也是一个管线命令，可以分析 standard input,sed可以将数据进行取代、删除、新增、撷取特定行等等的功能
		选项与参数：
		-n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN
		的数据一般都会被列出到屏幕上。但如果加上 -n 参数后，则只有经过
		sed 特殊处理的那一行(或者动作)才会被列出来。
		-e ：直接在指令列模式上进行 sed 的动作编辑；
		-f ：直接将 sed 的动作写在一个档案内， -f filename 则可以执行 filename 内
		的
		sed 动作；
		-r ：sed 的动作支持的是延伸型正规表示法的语法。 (预设是基础正规表示法语
		法)
		-i ：直接修改读取的档案内容，而不是由屏幕输出。

		动作说明：cat -n /etc/passwd | sed '2,5d' 删除第2到5行
		a ：新增， a 的后面可以接字符串，而这些字符串会在新的一行出现(目前的下一行)～
			nl /etc/passwd | sed '2a lalalallalal'(插入到后面)，新增好几行的话可以用反斜杠换行
		c ：取代， c 的后面可以接字符串，这些字符串可以取代 n1,n2 之间的行！
		d ：删除
			sed '/^$/d'	删除空白行
		i ：插入， i 的后面可以接字符串，而这些字符串会在新的一行出现(目前的上一行)；
			nl /etc/passwd | sed '2i lalalallalal'(插入到前面)
		p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运作～
			sed -n '10,20p'   打印10行到20行
		s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！

		实例：获取ip地址
		/sbin/ifconfig eth0 | grep 'inet' | sed 's/^.*inet.//g'| sed 's/..netmask.*$//g'

printf	透过一些特殊符号来将数据进行格式化输出

awk 	使用『字段』为依据，进行数据的重新整理与输出
		last -n 5 | awk '{print $1 "\t" $3}'：取出登入者前五行的用户名和ip
diff    文件\目录对比，以行为单位
		-b ：忽略一行当中，仅有多个空白的差异(例如 "about me" 与 "about me"视为相同
		-B ：忽略空白行的差异。
		-i ：忽略大小写的不同
		-Naur : 制作差异档
cmp   	文件对比，以字节为单位
		-s ：将所有的不同点的字节处都列出来。因为 cmp 预设仅会输出第一个发现的不同点

patch   将旧版数据更新到新版 (主要亦由 diff 建立 patch 的补丁来源档案)
