对象的数据属性有四个特性，默认都是true,不能直接访问
[[Configurable]]:	能否通过delete删除
[[Enumerable]]: 	能否通过for-in枚举
[[Writable]]: 		能否修改属性的值
[[Value]]: 			包含这个属性的数据值，默认是undefined

修改属性默认特性：Object.defineProperty(object, name, feature),三个参数分别为属性所在的对象，属性的名字，和描述符对象
var person = {}
Object.defineProperty(person, 'name', {
	writable: false,
	configurable: false,
	value: 'Nicholas',
})
设置person的name属性为只读,如果赋新值，在非严格模式下会忽略错误，在严格模式下会抛出错误
configurable是总开关，一旦设置成false，就不能再配置其他的除了writable之外的三个值了,而且第一次设置的时候三个特性的默认值都为false

对象的访问器属性：不包括数据值，包含getter和setter函数,getter和setter不能一起和writable,value设置
访问器属性不能直接定义，必须通过Object.defineProperty()来定义
可以多次调用 Object.defineProperty()方法修改同一个属性，但在把 configurable特性设置为 false 之后就会有限制了。
Object.defineProperty(person, 'name', {
	get: function() {
		return this.name; //这样做会造成死循环,所以不能返回跟自己属性名一样的值
	},
	set: function(newValue) {
		this.name = newValue;
		this.edition +=1;
	}
})

定义多个属性：
Object.defineProperties(obj, {
	name: {
		value: 'xxxx',
	},
	age: {
		value: 'yyy',
	},
	child: {
		configurable: true,
		get: function() {
			return this.age * 0.5;
		},
		set: function(newValue) {
			this._child = newValue;	
		}
	}
})

获取属性的特性：Object.getOwnPropertyDescriptor(obj, name);



创建对象：

工厂模式：抽象了创建具体对象的过程。缺点：无法识别对象的类型
function createPerson(name, age) {
	var p = new Object();
	p.name = name;
	p.age = age;

	return p;
}
var person = createPerson('Nicholas', '22');

构造函数模式：自定义对象类型的属性和方法。缺点：每个方法都要在每个示例上重新创建一遍
function Person(name, age) {
	this.name = name;
	this.age = age;
}
var person = new Person('Nicholas', '22');

new的过程：
1 创建一个新对象
2 将构造函数的作用域赋给新对象，这样this就指向了新对象
3 指向构造函数
4 返回新对象

模拟new：
function n(con) {
	var o = new Object();
	o.__proto__ = Person.prototype;	
	con.apply(o, Array.prototype.slice.call(arguments, 1));
	return o;
}

原型模式：创建的每个====函数=====都有一个prototype属性，指向原型对象
原型对象的contructor指向函数: Person.prototype.constructor === Person;
isPrototypeOf(): 判断是否是实例的原型对象
Person.prototype.isPrototypeOf(person);
Object.getPrototypeOf(person);
hasOwnProperty(): 检测某个属性是存在于实例中还是原型中，在实例中返回true 	 person.hasOwnProperty('name');
in: 检测是否可以访问到某个属性，不管在实例中还是原型中 		'name' in person
Object.keys(obj):	返回对象所有可枚举属性的字符串数组
Object.getOwnPropertyNames():	返回所有属性，包括不可枚举的属性

字面量方式创建原型
Person.prototype = {
	name: 'Nicholas',
	age: '333',
	//重写构造函数，设置成不可枚举类型，否则默认的构造函数指向Object，无法通过constructor来确定对象类型了
	Object.defineProperty(Person.prototype, 'construcor', {
		enumerable: false,
		value: Person
	})
}

为什么要使用动态原型模式，我觉得构造函数和原型模式组合就已经挺好了啊？
答：有的人就希望全部写在一起，即更好的封装性
示例：
function Person(name, job) {
	this.name = name;
	this.job = job;
	if (!typeof this.sayName == 'function') {
		Person.prototype.sayName = function() {
			console.log(this.name);
		}
	}
}
写在if判断里是因为不需要每次实例化实例的时候都重新初始化一次
